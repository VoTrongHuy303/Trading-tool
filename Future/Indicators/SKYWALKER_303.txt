// © votronghuy1203
// 1/7/2024
//@version=5

strategy("SKYWALKER_303","SKYWALKER_303"
  , overlay = true
  , max_labels_count = 500
  , max_lines_count = 500
  , max_boxes_count = 500
  , max_bars_back = 500)


string Indicator_use = "Should be used in conjunction with ADX to confirm the trend"
bool Indicator_used_together = input.bool(false, title = "Indicator used together", tooltip = Indicator_use)


lengthRSI =  7

overSoldUptrend = 33
overBoughtUptrend = 70 

overSoldDowntrend = 30 
overBoughtDowntrend = 60 
price = close
vrsi = ta.rsi(price, lengthRSI)

coD = ta.crossover(vrsi, overSoldDowntrend)
cuD = ta.crossunder(vrsi, overBoughtDowntrend)

coU = ta.crossover(vrsi, overSoldUptrend)
cuU = ta.crossunder(vrsi, overBoughtUptrend)





lengthEMA = 400

ema_value = ta.ema(price, lengthEMA)


showEma = input(title='Show Ema', group='EMA', defval=true)

emaLeght1 = 5
emaLeght2 = 10
emaLeght3 = 20
color20ema = false
emaLeght4 = 50
emaLeght5 = 100
emaLeght6 = 200
emaLeght7 = 400

//calc
ema1 = ta.ema(close, emaLeght1)
ema2 = ta.ema(close, emaLeght2)
ema3 = ta.ema(close, emaLeght3)
ema4 = ta.ema(close, emaLeght4)
ema5 = ta.ema(close, emaLeght5)
ema6 = ta.ema(close, emaLeght6)
ema7 = ta.ema(close, emaLeght7)

//plot
plot1 = plot(showEma ? ema1 : na, title = "EMA1", color=color.rgb(120, 123, 134, 100), transp=50, linewidth=1)
plot2 = plot(showEma ? ema2 : na, title = "EMA2", color=ema2 < ema3 ? color.rgb(255, 82, 82, 100) : color.rgb(76, 175, 79, 100), transp=30, linewidth=2)
plot3 = plot(showEma ? ema3 : na, title = "EMA3", color=color20ema ? color.rgb(255, 235, 59, 100) : ema2 < ema3 ? color.rgb(255, 82, 82, 100) : color.rgb(76, 175, 79, 100), transp=30, linewidth=2)
plot4 = plot(showEma ? ema4 : na, title = "EMA4", color=color.rgb(120, 123, 134, 100), transp=80,linewidth=1)
plot5 = plot(showEma ? ema5 : na, title = "EMA5", color=color.rgb(120, 123, 134, 100), transp=80, linewidth=1)
plot6 = plot(showEma ? ema6 : na, title = "EMA6", color=color.rgb(120, 123, 134, 100), transp=80, linewidth=1)
plot7 = plot(showEma ? ema7 : na,  title = "EMA7", color=color.rgb(255, 255, 255, 18), linewidth=1)

//fill
fill(plot2, plot3, color=ema2 < ema3 ? color.rgb(236, 24, 77, 90) : color.rgb(1, 50, 148, 90), transp=80)
fill(plot2, plot4, color=ema2 < ema4 ? color.rgb(236, 24, 77, 95): color.rgb(1, 50, 148, 95), transp=95)
fill(plot2, plot5, color=ema2 < ema5 ? color.rgb(236, 24, 77, 95): color.rgb(1, 50, 148, 95), transp=95)
fill(plot2, plot6, color=ema2 < ema6 ? color.rgb(236, 24, 77, 95): color.rgb(1, 50, 148, 95), transp=95)
fill(plot2, plot7, color=ema2 < ema7 ? color.rgb(236, 24, 77, 95) :  color.rgb(1, 50, 148, 95), transp=95)


is_new_long = (strategy.position_size > 0) and (strategy.position_size > strategy.position_size[1])
is_new_short = (strategy.position_size < 0) and (strategy.position_size < strategy.position_size[1])

longCondition = price > ema_value
if (longCondition and not na(vrsi) )
	if (coU)
		strategy.entry("BUY", strategy.long, comment="[💲]")
	if (cuU)
		strategy.entry("E", strategy.short, comment="💵")

shortCondition = price < ema_value
if (shortCondition and not na(vrsi) )
	if (coD)
		strategy.entry("E", strategy.long, comment="💵")
	if (cuD)
		strategy.entry("SELL", strategy.short, comment="[💲]")

plotshape(is_new_long and longCondition, "Long", shape.labelup, location.belowbar, color = #0051ff,offset =  0, text = "𝗟𝗢𝗡𝗚", textcolor = #ffffff,size = size.small)
plotshape(is_new_short and shortCondition, "Short", shape.labeldown, location.abovebar, color = #ff0040,offset =  0, text = "𝗦𝗛𝗢𝗥𝗧", textcolor = #ffffff, size = size.small)

plotshape(is_new_long and shortCondition, "x", shape.diamond, location.belowbar, color = #0051ff,offset =  0,size = size.tiny)
plotshape(is_new_short and longCondition, "x", shape.diamond, location.abovebar, color = #ff0040,offset =  0, size = size.tiny)


//-----------------------------------------------------------------------------{
//Constants
//-----------------------------------------------------------------------------{
color TRANSP_CSS = #ffffff00

//Tooltips
string MODE_TOOLTIP          = 'Allows to display historical Structure or only the recent ones'
string STYLE_TOOLTIP         = 'Indicator color theme'
string COLOR_CANDLES_TOOLTIP = 'Display additional candles with a color reflecting the current trend detected by structure'
string SHOW_INTERNAL         = 'Display internal market structure'
string CONFLUENCE_FILTER     = 'Filter non significant internal structure breakouts'
string SHOW_SWING            = 'Display swing market Structure'
string SHOW_SWING_POINTS     = 'Display swing point as labels on the chart'
string SHOW_SWHL_POINTS      = 'Highlight most recent strong and weak high/low points on the chart'
string INTERNAL_OB           = 'Display internal order blocks on the chart\n\nNumber of internal order blocks to display on the chart'
string SWING_OB              = 'Display swing order blocks on the chart\n\nNumber of internal swing blocks to display on the chart'
string FILTER_OB             = 'Method used to filter out volatile order blocks \n\nIt is recommended to use the cumulative mean range method when a low amount of data is available'
string SHOW_EQHL             = 'Display equal highs and equal lows on the chart'
string EQHL_BARS             = 'Number of bars used to confirm equal highs and equal lows'
string EQHL_THRESHOLD        = 'Sensitivity threshold in a range (0, 1) used for the detection of equal highs & lows\n\nLower values will return fewer but more pertinent results'
string SHOW_FVG              = 'Display fair values gaps on the chart'
string AUTO_FVG              = 'Filter out non significant fair value gaps'
string FVG_TF                = 'Fair value gaps timeframe'
string EXTEND_FVG            = 'Determine how many bars to extend the Fair Value Gap boxes on chart'
string PED_ZONES             = 'Display premium, discount, and equilibrium zones on chart'

//-----------------------------------------------------------------------------{
//Settings
//-----------------------------------------------------------------------------{
//General
//----------------------------------------{
mode = 'Historical'


style = 'Colored'


show_trend = input(true, 'Color Candles'
  , group = 'Trend settup'
  , tooltip = COLOR_CANDLES_TOOLTIP)

//----------------------------------------}
//Internal Structure
//----------------------------------------{
show_internals = input(false, 'Show Internal Structure'
  , group = 'Real Time Internal Structure'
  , tooltip = SHOW_INTERNAL)

show_ibull = input.string('All', 'Bullish Structure'
  , options = ['All', 'BOS', 'CHoCH']
  , inline = 'ibull'
  , group = 'Real Time Internal Structure')

swing_ibull_css = input(#90bff9, ''
  , inline = 'ibull'
  , group = 'Real Time Internal Structure')

//Bear Structure
show_ibear = input.string('All', 'Bearish Structure'
  , options = ['All', 'BOS', 'CHoCH']
  , inline = 'ibear'
  , group = 'Real Time Internal Structure')

swing_ibear_css = input(#f48fb1, ''
  , inline = 'ibear'
  , group = 'Real Time Internal Structure')

ifilter_confluence = input(false, 'Confluence Filter'
  , group = 'Real Time Internal Structure'
  , tooltip = CONFLUENCE_FILTER)

internal_structure_size = 'Tiny'


//----------------------------------------}
//Swing Structure
//----------------------------------------{
show_Structure = input(false, 'Show Swing Structure'
  , group = 'Real Time Swing Structure'
  , tooltip = SHOW_SWING)

//Bull Structure
show_bull = input.string('All', 'Bullish Structure'
  , options = ['All', 'BOS', 'CHoCH']
  , inline = 'bull'
  , group = 'Real Time Swing Structure')

swing_bull_css = input(#2430f9, ''
  , inline = 'bull'
  , group = 'Real Time Swing Structure')

//Bear Structure
show_bear = input.string('All', 'Bearish Structure'
  , options = ['All', 'BOS', 'CHoCH']
  , inline = 'bear'
  , group = 'Real Time Swing Structure')

swing_bear_css = input(#ff0040 , ''
  , inline = 'bear'
  , group = 'Real Time Swing Structure')

swing_structure_size = 'Small'


//Swings
show_swings = input(false, 'Show Swings Points'
  , inline = 'swings'
  , group = 'Real Time Swing Structure'
  , tooltip = SHOW_SWING_POINTS)

length = input.int(50, ''
  , minval = 10
  , inline = 'swings'
  , group = 'Real Time Swing Structure')

show_hl_swings = input(true, 'Show Strong/Weak High/Low'
  , group = 'Real Time Swing Structure'
  , tooltip = SHOW_SWHL_POINTS)

//----------------------------------------}
//Order Blocks
//----------------------------------------{
show_iob = input(true, 'Internal Key Zones'
  , inline = 'IKZ'
  , group = 'Key Zones'
  , tooltip = INTERNAL_OB)

iob_showlast = input.int(5, ''
  , minval = 1
  , inline = 'IKZ'
  , group = 'Key Zones')

show_ob = input(true, 'Swing Key Zones'
  , inline = 'KZ'
  , group = 'Key Zones'
  , tooltip = SWING_OB)

ob_showlast = input.int(5, ''
  , minval = 1
  , inline = 'KZ'
  , group = 'Key Zones')

ob_filter = 'Atr'

ibull_ob_css = color.new(#1848cc, 80)

ibear_ob_css = color.new(#880e4f, 80)

bull_ob_css = color.new(#1848cc, 80)

bear_ob_css = color.new(#880e4f, 80)

//----------------------------------------}
//EQH/EQL
//----------------------------------------{
show_eq = input(false, 'Equal High/Low'
  , group = 'EQH/EQL'
  , tooltip = SHOW_EQHL)

eq_len = input.int(3, 'Bars Confirmation'
  , minval = 1
  , group = 'EQH/EQL'
  , tooltip = EQHL_BARS)

eq_threshold = input.float(0.1, 'Threshold'
  , minval = 0
  , maxval = 0.5
  , step = 0.1
  , group = 'EQH/EQL'
  , tooltip = EQHL_THRESHOLD)

eq_size = 'Tiny'

//----------------------------------------}
//Fair Value Gaps
//----------------------------------------{
show_fvg = input(true, 'Fair Value Gaps'
  , group = 'Fair Value Gaps'
  , tooltip = SHOW_FVG)
  
fvg_auto = input(true, "Auto Threshold"
  , group = 'Fair Value Gaps'
  , tooltip = AUTO_FVG)

fvg_tf = input.timeframe('', "Timeframe"
  , group = 'Fair Value Gaps'
  , tooltip = FVG_TF)

bull_fvg_css = input.color(color.new(#4c00ff, 70), 'Bullish FVG'
  , group = 'Fair Value Gaps')

bear_fvg_css = input.color(color.new(#ff0055, 70), 'Bearish FVG'
  , group = 'Fair Value Gaps')

fvg_extend = input.int(1, "Extend FVG"
  , minval = 0
  , group = 'Fair Value Gaps'
  , tooltip = EXTEND_FVG)

//----------------------------------------}
//Previous day/week high/low
//----------------------------------------{
//Daily
show_pdhl = input(false, 'Daily'
  , inline = 'daily'
  , group = 'Highs & Lows MTF')

pdhl_style = input.string('⎯⎯⎯', ''
  , options = ['⎯⎯⎯', '----', '····']
  , inline = 'daily'
  , group = 'Highs & Lows MTF')

pdhl_css = input(#2157f3, ''
  , inline = 'daily'
  , group = 'Highs & Lows MTF')

//Weekly
show_pwhl = input(false, 'Weekly'
  , inline = 'weekly'
  , group = 'Highs & Lows MTF')

pwhl_style = input.string('⎯⎯⎯', ''
  , options = ['⎯⎯⎯', '----', '····']
  , inline = 'weekly'
  , group = 'Highs & Lows MTF')

pwhl_css = input(#2157f3, ''
  , inline = 'weekly'
  , group = 'Highs & Lows MTF')

//Monthly
show_pmhl = input(false, 'Monthly'
  , inline = 'monthly'
  , group = 'Highs & Lows MTF')

pmhl_style = input.string('⎯⎯⎯', ''
  , options = ['⎯⎯⎯', '----', '····']
  , inline = 'monthly'
  , group = 'Highs & Lows MTF')

pmhl_css = input(#2157f3, ''
  , inline = 'monthly'
  , group = 'Highs & Lows MTF')


//----------------------------------------}

//-----------------------------------------------------------------------------}
//Functions
//-----------------------------------------------------------------------------{
n = bar_index

atr2 = ta.atr(200)
cmean_range = ta.cum(high - low) / n

//HL Output function
hl() => [high, low]

//Get ohlc values function
get_ohlc()=> [close[1], open[1], high, low, high[2], low[2]]

//Display Structure function
display_Structure(x, y, txt, css, dashed, down, lbl_size)=>
    structure_line = line.new(x, y, n, y
      , color = css
      , style = dashed ? line.style_dashed : line.style_solid)

    structure_lbl = label.new(int(math.avg(x, n)), y, txt
      , color = TRANSP_CSS
      , textcolor = css
      , style = down ? label.style_label_down : label.style_label_up
      , size = lbl_size)

    if mode == 'Present'
        line.delete(structure_line[1])
        label.delete(structure_lbl[1])

//Swings detection/measurements
swings(len)=>
    var os = 0
    
    upper = ta.highest(len)
    lower = ta.lowest(len)

    os := high[len] > upper ? 0 : low[len] < lower ? 1 : os[1]

    top = os == 0 and os[1] != 0 ? high[len] : 0
    btm = os == 1 and os[1] != 1 ? low[len] : 0

    [top, btm]

//Order block coordinates function
ob_coord(use_max, loc, target_top, target_btm, target_left, target_type)=>
    min = 99999999.
    max = 0.
    idx = 1

    ob_threshold = ob_filter == 'Atr' ? atr2 : cmean_range 

    //Search for highest/lowest high within the structure interval and get range
    if use_max
        for i = 1 to (n - loc)-1
            if (high[i] - low[i]) < ob_threshold[i] * 2
                max := math.max(high[i], max)
                min := max == high[i] ? low[i] : min
                idx := max == high[i] ? i : idx
    else
        for i = 1 to (n - loc)-1
            if (high[i] - low[i]) < ob_threshold[i] * 2
                min := math.min(low[i], min)
                max := min == low[i] ? high[i] : max
                idx := min == low[i] ? i : idx

    array.unshift(target_top, max)
    array.unshift(target_btm, min)
    array.unshift(target_left, time[idx])
    array.unshift(target_type, use_max ? -1 : 1)

//Set order blocks
display_ob(boxes, target_top, target_btm, target_left, target_type, show_last, swing, size)=>
    for i = 0 to math.min(show_last-1, size-1)
        get_box = array.get(boxes, i)

        box.set_lefttop(get_box, array.get(target_left, i), array.get(target_top, i))
        box.set_rightbottom(get_box, array.get(target_left, i), array.get(target_btm, i))
        box.set_extend(get_box, extend.right)

        color css = na
        
        if swing 
            if style == 'Monochrome'
                css := array.get(target_type, i) == 1 ? color.new(#b2b5be, 80) : color.new(#5d606b, 80)
                border_css = array.get(target_type, i) == 1 ? #b2b5be : #5d606b
                box.set_border_color(get_box, border_css)
            else
                css := array.get(target_type, i) == 1 ? bull_ob_css : bear_ob_css
                box.set_border_color(get_box, css)

            box.set_bgcolor(get_box, css)
        else
            if style == 'Monochrome'
                css := array.get(target_type, i) == 1 ? color.new(#b2b5be, 80) : color.new(#5d606b, 80)
            else
                css := array.get(target_type, i) == 1 ? ibull_ob_css : ibear_ob_css
            
            box.set_border_color(get_box, css)
            box.set_bgcolor(get_box, css)
        
//Line Style function
get_line_style(style) =>
    out = switch style
        '⎯⎯⎯'  => line.style_solid
        '----' => line.style_dashed
        '····' => line.style_dotted

//Set line/labels function for previous high/lows
phl(h, l, tf, css)=>
    var line high_line = line.new(na,na,na,na
      , xloc = xloc.bar_time
      , color = css
      , style = get_line_style(pdhl_style))

    var label high_lbl = label.new(na,na
      , xloc = xloc.bar_time
      , text = str.format('P{0}H', tf)
      , color = TRANSP_CSS
      , textcolor = css
      , size = size.small
      , style = label.style_label_left)

    var line low_line = line.new(na,na,na,na
      , xloc = xloc.bar_time
      , color = css
      , style = get_line_style(pdhl_style))

    var label low_lbl = label.new(na,na
      , xloc = xloc.bar_time
      , text = str.format('P{0}L', tf)
      , color = TRANSP_CSS
      , textcolor = css
      , size = size.small
      , style = label.style_label_left)

    hy = ta.valuewhen(h != h[1], h, 1)
    hx = ta.valuewhen(h == high, time, 1)

    ly = ta.valuewhen(l != l[1], l, 1)
    lx = ta.valuewhen(l == low, time, 1)

    if barstate.islast
        ext = time + (time - time[1])*20

        //High
        line.set_xy1(high_line, hx, hy)
        line.set_xy2(high_line, ext, hy)

        label.set_xy(high_lbl, ext, hy)

        //Low
        line.set_xy1(low_line, lx, ly)
        line.set_xy2(low_line, ext, ly)

        label.set_xy(low_lbl, ext, ly)

//-----------------------------------------------------------------------------}
//Global variables
//-----------------------------------------------------------------------------{
var trend = 0, var itrend = 0

var top_y = 0., var top_x = 0
var btm_y = 0., var btm_x = 0

var itop_y = 0., var itop_x = 0
var ibtm_y = 0., var ibtm_x = 0

var trail_up = high, var trail_dn = low
var trail_up_x = 0,  var trail_dn_x = 0

var top_cross = true,  var btm_cross = true
var itop_cross = true, var ibtm_cross = true

var txt_top = '',  var txt_btm = ''

//Alerts
bull_choch_alert = false 
bull_bos_alert   = false 

bear_choch_alert = false 
bear_bos_alert   = false 

bull_ichoch_alert = false 
bull_ibos_alert   = false 

bear_ichoch_alert = false 
bear_ibos_alert   = false 

bull_iob_break = false 
bear_iob_break = false

bull_ob_break = false 
bear_ob_break = false

eqh_alert = false 
eql_alert = false 

//Structure colors
var bull_css = style == 'Monochrome' ? #b2b5be 
  : swing_bull_css

var bear_css = style == 'Monochrome' ? #b2b5be 
  : swing_bear_css

var ibull_css = style == 'Monochrome' ? #b2b5be 
  : swing_ibull_css

var ibear_css = style == 'Monochrome' ? #b2b5be 
  : swing_ibear_css

//Labels size
var internal_structure_lbl_size = internal_structure_size == 'Tiny' 
  ? size.tiny 
  : internal_structure_size == 'Small' 
  ? size.small 
  : size.normal 

var swing_structure_lbl_size = swing_structure_size == 'Tiny' 
  ? size.tiny 
  : swing_structure_size == 'Small' 
  ? size.small 
  : size.normal 

var eqhl_lbl_size = eq_size == 'Tiny' 
  ? size.tiny 
  : eq_size == 'Small' 
  ? size.small
  : size.normal 

//Swings
[top, btm] = swings(length)

[itop, ibtm] = swings(5)

//-----------------------------------------------------------------------------}
//Pivot High
//-----------------------------------------------------------------------------{
var line extend_top = na

var label extend_top_lbl = label.new(na, na
  , color = TRANSP_CSS
  , textcolor = bear_css
  , style = label.style_label_down
  , size = size.tiny)

if top
    top_cross := true
    txt_top := top > top_y ? 'HH' : 'LH'

    if show_swings
        top_lbl = label.new(n-length, top, txt_top
          , color = TRANSP_CSS
          , textcolor = bear_css
          , style = label.style_label_down
          , size = swing_structure_lbl_size)

        if mode == 'Present'
            label.delete(top_lbl[1])

    //Extend recent top to last bar
    line.delete(extend_top[1])
    extend_top := line.new(n-length, top, n, top
      , color = bear_css)

    top_y := top
    top_x := n - length

    trail_up := top
    trail_up_x := n - length

if itop
    itop_cross := true

    itop_y := itop
    itop_x := n - 5

//Trailing maximum
trail_up := math.max(high, trail_up)
trail_up_x := trail_up == high ? n : trail_up_x

//Set top extension label/line
if barstate.islast and show_hl_swings
    line.set_xy1(extend_top, trail_up_x, trail_up)
    line.set_xy2(extend_top, n + 20, trail_up)

    label.set_x(extend_top_lbl, n + 20)
    label.set_y(extend_top_lbl, trail_up)
    label.set_text(extend_top_lbl, trend < 0 ? 'Strong High' : 'Weak High')

//-----------------------------------------------------------------------------}
//Pivot Low
//-----------------------------------------------------------------------------{
var line extend_btm = na 

var label extend_btm_lbl = label.new(na, na
  , color = TRANSP_CSS
  , textcolor = bull_css
  , style = label.style_label_up
  , size = size.tiny)

if btm
    btm_cross := true
    txt_btm := btm < btm_y ? 'LL' : 'HL'
    
    if show_swings
        btm_lbl = label.new(n - length, btm, txt_btm
          , color = TRANSP_CSS
          , textcolor = bull_css
          , style = label.style_label_up
          , size = swing_structure_lbl_size)

        if mode == 'Present'
            label.delete(btm_lbl[1])
    
    //Extend recent btm to last bar
    line.delete(extend_btm[1])
    extend_btm := line.new(n - length, btm, n, btm
      , color = bull_css)

    btm_y := btm
    btm_x := n-length

    trail_dn := btm
    trail_dn_x := n-length

if ibtm
    ibtm_cross := true

    ibtm_y := ibtm
    ibtm_x := n - 5

//Trailing minimum
trail_dn := math.min(low, trail_dn)
trail_dn_x := trail_dn == low ? n : trail_dn_x

//Set btm extension label/line
if barstate.islast and show_hl_swings
    line.set_xy1(extend_btm, trail_dn_x, trail_dn)
    line.set_xy2(extend_btm, n + 20, trail_dn)

    label.set_x(extend_btm_lbl, n + 20)
    label.set_y(extend_btm_lbl, trail_dn)
    label.set_text(extend_btm_lbl, trend > 0 ? 'Strong Low' : 'Weak Low')

//-----------------------------------------------------------------------------}
//Order Blocks Arrays
//-----------------------------------------------------------------------------{
var iob_top = array.new_float(0)
var iob_btm = array.new_float(0)
var iob_left = array.new_int(0)
var iob_type = array.new_int(0)

var ob_top = array.new_float(0)
var ob_btm = array.new_float(0)
var ob_left = array.new_int(0)
var ob_type = array.new_int(0)

//-----------------------------------------------------------------------------}
//Pivot High BOS/CHoCH
//-----------------------------------------------------------------------------{
//Filtering
var bull_concordant = true

if ifilter_confluence
    bull_concordant := high - math.max(close, open) > math.min(close, open - low)

//Detect internal bullish Structure
if ta.crossover(close, itop_y) and itop_cross and top_y != itop_y and bull_concordant
    bool choch = na
    
    if itrend < 0
        choch := true
        bull_ichoch_alert := true
    else 
        bull_ibos_alert := true
    
    txt = choch ? 'CHoCH' : 'BOS'

    if show_internals
        if show_ibull == 'All' or (show_ibull == 'BOS' and not choch) or (show_ibull == 'CHoCH' and choch)
            display_Structure(itop_x, itop_y, txt, ibull_css, true, true, internal_structure_lbl_size)
    
    itop_cross := false
    itrend := 1
    
    //Internal Order Block
    if show_iob
        ob_coord(false, itop_x, iob_top, iob_btm, iob_left, iob_type)

//Detect bullish Structure
if ta.crossover(close, top_y) and top_cross
    bool choch = na
    
    if trend < 0
        choch := true
        bull_choch_alert := true
    else 
        bull_bos_alert := true

    txt = choch ? 'CHoCH' : 'BOS'
    
    if show_Structure
        if show_bull == 'All' or (show_bull == 'BOS' and not choch) or (show_bull == 'CHoCH' and choch)
            display_Structure(top_x, top_y, txt, bull_css, false, true, swing_structure_lbl_size)
    
    //Order Block
    if show_ob
        ob_coord(false, top_x, ob_top, ob_btm, ob_left, ob_type)

    top_cross := false
    trend := 1

//-----------------------------------------------------------------------------}
//Pivot Low BOS/CHoCH
//-----------------------------------------------------------------------------{
var bear_concordant = true

if ifilter_confluence
    bear_concordant := high - math.max(close, open) < math.min(close, open - low)

//Detect internal bearish Structure
if ta.crossunder(close, ibtm_y) and ibtm_cross and btm_y != ibtm_y and bear_concordant
    bool choch = false
    
    if itrend > 0
        choch := true
        bear_ichoch_alert := true
    else 
        bear_ibos_alert := true
    
    txt = choch ? 'CHoCH' : 'BOS'

    if show_internals
        if show_ibear == 'All' or (show_ibear == 'BOS' and not choch) or (show_ibear == 'CHoCH' and choch)
            display_Structure(ibtm_x, ibtm_y, txt, ibear_css, true, false, internal_structure_lbl_size)
    
    ibtm_cross := false
    itrend := -1
    
    //Internal Order Block
    if show_iob
        ob_coord(true, ibtm_x, iob_top, iob_btm, iob_left, iob_type)

//Detect bearish Structure
if ta.crossunder(close, btm_y) and btm_cross
    bool choch = na
    
    if trend > 0
        choch := true
        bear_choch_alert := true
    else 
        bear_bos_alert := true

    txt = choch ? 'CHoCH' : 'BOS'
    
    if show_Structure
        if show_bear == 'All' or (show_bear == 'BOS' and not choch) or (show_bear == 'CHoCH' and choch)
            display_Structure(btm_x, btm_y, txt, bear_css, false, false, swing_structure_lbl_size)
    
    //Order Block
    if show_ob
        ob_coord(true, btm_x, ob_top, ob_btm, ob_left, ob_type)

    btm_cross := false
    trend := -1

//-----------------------------------------------------------------------------}
//Order Blocks
//-----------------------------------------------------------------------------{
//Set order blocks
var iob_boxes = array.new_box(0)
var ob_boxes = array.new_box(0)

//Delete internal order blocks box coordinates if top/bottom is broken
for element in iob_type
    index = array.indexof(iob_type, element)

    if close < array.get(iob_btm, index) and element == 1
        array.remove(iob_top, index) 
        array.remove(iob_btm, index) 
        array.remove(iob_left, index) 
        array.remove(iob_type, index)
        bull_iob_break := true

    else if close > array.get(iob_top, index) and element == -1
        array.remove(iob_top, index) 
        array.remove(iob_btm, index)
        array.remove(iob_left, index) 
        array.remove(iob_type, index)
        bear_iob_break := true

//Delete internal order blocks box coordinates if top/bottom is broken
for element in ob_type
    index = array.indexof(ob_type, element)

    if close < array.get(ob_btm, index) and element == 1
        array.remove(ob_top, index) 
        array.remove(ob_btm, index) 
        array.remove(ob_left, index) 
        array.remove(ob_type, index)
        bull_ob_break := true

    else if close > array.get(ob_top, index) and element == -1
        array.remove(ob_top, index) 
        array.remove(ob_btm, index)
        array.remove(ob_left, index) 
        array.remove(ob_type, index)
        bear_ob_break := true

iob_size = array.size(iob_type)
ob_size = array.size(ob_type)

if barstate.isfirst
    if show_iob
        for i = 0 to iob_showlast-1
            array.push(iob_boxes, box.new(na,na,na,na, xloc = xloc.bar_time))
    if show_ob
        for i = 0 to ob_showlast-1
            array.push(ob_boxes, box.new(na,na,na,na, xloc = xloc.bar_time))

if iob_size > 0
    if barstate.islast
        display_ob(iob_boxes, iob_top, iob_btm, iob_left, iob_type, iob_showlast, false, iob_size)

if ob_size > 0
    if barstate.islast
        display_ob(ob_boxes, ob_top, ob_btm, ob_left, ob_type, ob_showlast, true, ob_size)

//-----------------------------------------------------------------------------}
//EQH/EQL
//-----------------------------------------------------------------------------{
var eq_prev_top = 0.
var eq_top_x = 0

var eq_prev_btm = 0.
var eq_btm_x = 0

if show_eq
    eq_top = ta.pivothigh(eq_len, eq_len)
    eq_btm = ta.pivotlow(eq_len, eq_len)

    if eq_top 
        max = math.max(eq_top, eq_prev_top)
        min = math.min(eq_top, eq_prev_top)
        
        if max < min + atr2 * eq_threshold
            eqh_line = line.new(eq_top_x, eq_prev_top, n-eq_len, eq_top
              , color = bear_css
              , style = line.style_dotted)

            eqh_lbl = label.new(int(math.avg(n-eq_len, eq_top_x)), eq_top, 'EQH'
              , color = #00000000
              , textcolor = bear_css
              , style = label.style_label_down
              , size = eqhl_lbl_size)

            if mode == 'Present'
                line.delete(eqh_line[1])
                label.delete(eqh_lbl[1])
            
            eqh_alert := true

        eq_prev_top := eq_top
        eq_top_x := n-eq_len

    if eq_btm 
        max = math.max(eq_btm, eq_prev_btm)
        min = math.min(eq_btm, eq_prev_btm)
        
        if min > max - atr2 * eq_threshold
            eql_line = line.new(eq_btm_x, eq_prev_btm, n-eq_len, eq_btm
              , color = bull_css
              , style = line.style_dotted)

            eql_lbl = label.new(int(math.avg(n-eq_len, eq_btm_x)), eq_btm, 'EQL'
              , color = #00000000
              , textcolor = bull_css
              , style = label.style_label_up
              , size = eqhl_lbl_size)

            eql_alert := true

            if mode == 'Present'
                line.delete(eql_line[1])
                label.delete(eql_lbl[1])

        eq_prev_btm := eq_btm
        eq_btm_x := n-eq_len

//-----------------------------------------------------------------------------}
//Fair Value Gaps
//-----------------------------------------------------------------------------{
var bullish_fvg_max = array.new_box(0)
var bullish_fvg_min = array.new_box(0)

var bearish_fvg_max = array.new_box(0)
var bearish_fvg_min = array.new_box(0)

float bullish_fvg_avg = na
float bearish_fvg_avg = na

bullish_fvg_cnd = false
bearish_fvg_cnd = false

[src_c1, src_o1, src_h, src_l, src_h2, src_l2] =
  request.security(syminfo.tickerid, fvg_tf, get_ohlc())

if show_fvg
    delta_per = (src_c1 - src_o1) / src_o1 * 100

    change_tf = timeframe.change(fvg_tf)

    threshold = fvg_auto ? ta.cum(math.abs(change_tf ? delta_per : 0)) / n * 2 
      : 0

    //FVG conditions
    bullish_fvg_cnd := src_l > src_h2
      and src_c1 > src_h2 
      and delta_per > threshold
      and change_tf

    bearish_fvg_cnd := src_h < src_l2 
      and src_c1 < src_l2 
      and -delta_per > threshold
      and change_tf

    //FVG Areas
    if bullish_fvg_cnd
        array.unshift(bullish_fvg_max, box.new(n-1, src_l, n + fvg_extend, math.avg(src_l, src_h2)
          , border_color = bull_fvg_css
          , bgcolor = bull_fvg_css))
        
        array.unshift(bullish_fvg_min, box.new(n-1, math.avg(src_l, src_h2), n + fvg_extend, src_h2
          , border_color = bull_fvg_css
          , bgcolor = bull_fvg_css))
    
    if bearish_fvg_cnd
        array.unshift(bearish_fvg_max, box.new(n-1, src_h, n + fvg_extend, math.avg(src_h, src_l2)
          , border_color = bear_fvg_css
          , bgcolor = bear_fvg_css))
        
        array.unshift(bearish_fvg_min, box.new(n-1, math.avg(src_h, src_l2), n + fvg_extend, src_l2
          , border_color = bear_fvg_css
          , bgcolor = bear_fvg_css))

    for bx in bullish_fvg_min
        if low < box.get_bottom(bx)
            box.delete(bx)
            box.delete(array.get(bullish_fvg_max, array.indexof(bullish_fvg_min, bx)))
    
    for bx in bearish_fvg_max
        if high > box.get_top(bx)
            box.delete(bx)
            box.delete(array.get(bearish_fvg_min, array.indexof(bearish_fvg_max, bx)))

//-----------------------------------------------------------------------------}

//-----------------------------------------------------------------------------}
//Trend
//-----------------------------------------------------------------------------{
var color trend_css = na

if show_trend
    if style == 'Colored'
        trend_css := itrend == 1 ? bull_css : bear_css
    else if style == 'Monochrome'
        trend_css := itrend == 1 ? #b2b5be : #5d606b

plotcandle(open, high, low, close
  , color = trend_css
  , wickcolor = trend_css
  , bordercolor = trend_css
  , editable = false)




// ============================================ [Momentum of trend] ===========================================
// ** ---> Inputs ------------- {
//Momentum of trend

var bool positive       = false
var bool negative       = false
var bool positive2       = false
var bool negative2       = false
var bool positive3       = false
var bool negative3       = false

string visual           = "Color of Momentum of trend" 
int Len2                = 14
int pmom                = 80
int nmom                = 20
int pmom2                = 70
int nmom2                = 30
int pmom3                = 65
int nmom3                = 35
bool showlabels         = true
color p                 = input(#0c40d186,"Positive",inline = "001",group =visual )
color n2                 = input(#d1153475,"Negative",inline = "001",group =visual )

rsi                     = ta.rsi(close, Len2)
//------------------- }

// ** ---> Momentums ------------- {

p_mom               = rsi[1] < pmom and rsi > pmom and rsi > nmom and ta.change(ta.ema(close,5)) > 0
n_mom               = rsi < nmom and ta.change(ta.ema(close,5)) < 0

p_mom2               = rsi[1] < pmom2 and rsi > pmom2 and rsi > nmom2 and ta.change(ta.ema(close,5)) > 0
n_mom2               = rsi < nmom2 and ta.change(ta.ema(close,5)) < 0

p_mom3               = rsi > pmom3 and rsi > nmom3 and ta.change(ta.ema(close,5)) > 0
n_mom3               = rsi < nmom3 and ta.change(ta.ema(close,5)) < 0
if p_mom
    positive:= true
    negative:= false

if n_mom
    positive:= false
    negative:= true     


if p_mom2
    positive2:= true
    negative2:= false

if n_mom2
    positive2:= false
    negative2:= true     





pcondition = positive and not positive[1]
ncondition2 = negative and not negative[1]

pcondition_2 = positive2 and not positive2[1]
ncondition2_2 = negative2 and not negative2[1]


pcondition_3 = positive3 and not positive3[1]
ncondition2_3 = negative3 and not negative3[1]

plotshape(showlabels ? pcondition: na , title="Up trend Signal 80",style=shape.labelup, color=p, location= location.bottom, size=size.tiny,text= "🔵UF 80",textcolor = color.white)
plotshape(showlabels ? ncondition2: na , title="Down trend Signal 20",style=shape.labelup, color=n2, location= location.bottom , size=size.tiny,text = "🔴DF 20",textcolor = color.white)


plotshape(showlabels ? pcondition_2: na , title="Up trend Signal 70",style=shape.labelup, color=p, location= location.bottom, size=size.tiny,text= "🔵UF 70",textcolor = color.white)
plotshape(showlabels ? ncondition2_2: na , title="Down trend Signal 30",style=shape.labelup, color=n2, location= location.bottom , size=size.tiny,text = "🔴DF 30",textcolor = color.white)

plotshape(p_mom3, title="Up trend Signal 65",style=shape.square, location= location.top,color = #0051ff ,size=size.tiny)
plotshape(n_mom3 , title="Down trend Signal 35",style=shape.square, location= location.top , color = #ff0040 ,size=size.tiny)

// ============================================ [power of buy/sell] ===========================================

// power of buy/sell

// lengthMFI = 14
// os = 10
// ob = 90
// CurrentRes =true
// CustomRes = "240"

// //MFI Calc
// res = CurrentRes ? timeframe.period : CustomRes
// rawMoneyFlow = hlc3 * volume

// positiveMoneyFlow() =>
//     a = 0.0
//     a := hlc3 > hlc3[1] ? a + rawMoneyFlow : a
// negativeMoneyFlow() =>
//     b = 0.0
//     b := hlc3 < hlc3[1] ? b + rawMoneyFlow : b

// moneyFlowRatio = ta.sma(positiveMoneyFlow(), lengthMFI) / ta.sma(negativeMoneyFlow(), lengthMFI)

// moneyFlowIndex = request.security(syminfo.tickerid, res, 100 - 100 / (1 + moneyFlowRatio))

// //OB/OS Identification
// oversold = moneyFlowIndex[1] > os[1] and moneyFlowIndex < os
// overbought = moneyFlowIndex[1] < ob[1] and moneyFlowIndex > ob

// //Plotting


// plotshape(overbought, title="Power of the buyer Signal",style=shape.diamond, color=color.rgb(33, 149, 243, 29) , location= location.top , size=size.tiny)
// plotshape(oversold , title="power of the seller Signal",style=shape.diamond, color=color.rgb(245, 45, 105, 29), location= location.top , size=size.tiny)




//volume
string UHVol          = 'Default value is 3 , If the object is low liquidity set value is 5'
string VHVol          = 'Default value is 2.5 ,If the object is low liquidity set value is 3'
string HVol          = 'Default value is 1.7 ,If the object is low liquidity set value is 2.7 '


var string current_timeframe = timeframe.period
lengthVolumeMA = 20
ratioUltraVolume =      input.float(defval=3,   title="Ultra High Volume Ratio" ,group = 'Volume' , tooltip = UHVol)
ratioVeryHighVolume =   input.float(defval=2.5,   title="Very High Volume Ratio",group = 'Volume' , tooltip = VHVol)
ratioHighVolume =       input.float(defval=1.7,   title="High Volume Ratio",group = 'Volume' , tooltip = HVol)
ratioNormalVolume =     0.8
ratioLowVolume =        0.5
ratioVeryLowVolume =    0.5


    

// WILDERS MA
float volumeMA  = 0
volumeMA := nz(volumeMA[1]) + (volume-nz(volumeMA[1])) / lengthVolumeMA
ultraHighVolumeMin   = volumeMA * ratioUltraVolume
veryHighVolumeMin    = volumeMA * ratioVeryHighVolume
highVolumeMin        = volumeMA * ratioHighVolume
normalVolumeMin      = volumeMA * ratioNormalVolume
lowVolumeMin         = volumeMA * ratioLowVolume
veryLowVolumeMin     = volumeMA * ratioVeryLowVolume


volUltraHigh        = volume >= ultraHighVolumeMin                                      ? true : false
volVeryHigh         = volume >= veryHighVolumeMin   and volume < ultraHighVolumeMin     ? true : false
volHigh             = volume >= highVolumeMin       and volume < veryHighVolumeMin      ? true : false
volNormal           = volume >= normalVolumeMin     and volume < highVolumeMin          ? true : false
volLow              = volume >= lowVolumeMin        and volume < normalVolumeMin        ? true : false
volVeryLow          = volume < lowVolumeMin                                             ? true : false


palette = volUltraHigh ? color.rgb(218, 218, 218) : volVeryHigh ? color.rgb(218, 58, 204) : volHigh ? color.orange : volNormal ? color.green : volLow ? color.blue : color.silver


plotcandle(open, high, low, close, title="ultraHighVolume",color = volUltraHigh ? #ffffff : na, wickcolor = volUltraHigh?#ffffff: na, bordercolor = volUltraHigh ? #ffffff: na)
plotcandle(open, high, low, close, title="veryHighVolume",color = volVeryHigh ? #b2b5be : na, wickcolor = volVeryHigh?#b2b5be: na, bordercolor = volVeryHigh ? #b2b5be: na)
plotcandle(open, high, low, close, title="highVolumeMin",color = volHigh ? #b2b5be : na, wickcolor = volHigh?#b2b5be: na, bordercolor = volHigh ? #b2b5be: na)
// plotcandle(open, high, low, close, title="normalVolume",color = volNormal ? #2a2e39 : na, wickcolor = volNormal?#2a2e39: na, bordercolor = volNormal ? #2a2e39: na)
// plotcandle(open, high, low, close, title="lowVolume",color = volLow ? #434651 : na, wickcolor = volLow?#434651: na, bordercolor = volLow ? #434651: na)
// plotcandle(open, high, low, close, title="veryLowVolume",color = volVeryLow ? #B2B5BE : na, wickcolor = volVeryLow?#B2B5BE: na, bordercolor = volVeryLow ? #B2B5BE: na)

if volUltraHigh or volVeryHigh or volHigh 
    alert("Prepare")
// alertcondition(volUltraHigh or volVeryHigh or volHigh, title="Hunt", message="Prepare")

// ============================================================
linestyle = 'Candle'
hacandle =  false

tw = high - math.max(open, close) 
bw = math.min(open, close) - low 
body = math.abs(close - open) 

_rate(cond) =>
    ret = 0.5 * (tw + bw + (cond ? 2 * body : 0)) / (tw + bw + body) 
    ret := nz(ret) == 0 ? 0.5 : ret
    ret
    
deltaup =  volume * _rate(open <= close) 
deltadown = volume * _rate(open > close)
delta = close >= open ? deltaup : -deltadown
cumdelta = ta.cum(delta)
float ctl = na
float o = na
float h = na
float l = na
float c = na
if linestyle == 'Candle'
    o := cumdelta[1]
    h := math.max(cumdelta, cumdelta[1])
    l := math.min(cumdelta, cumdelta[1])
    c := cumdelta
    ctl
else
    ctl := cumdelta



float haclose = na
float haopen = na
float hahigh = na
float halow = na
haclose := (o + h + l + c) / 4
haopen  := na(haopen[1]) ? (o + c) / 2 : (haopen[1] + haclose[1]) / 2
hahigh  := math.max(h, math.max(haopen, haclose))
halow   := math.min(l,  math.min(haopen, haclose))
 
c_ = hacandle ? haclose : c
o_ = hacandle ? haopen : o
h_ = hacandle ? hahigh : h
l_ = hacandle ? halow : l

/////////////////////////////////// bollinger band ///////////////////////////
lengthbb = input.int(200, minval=1, group = "Bollinger Band")
maType = input.string("SMA", "Basis MA Type", options = ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group = "Bollinger Band")
src = close
mult = 2.0

ma(source, lengthbb, _type) =>
    switch _type
        "SMA" => ta.sma(source, lengthbb)
        "EMA" => ta.ema(source, lengthbb)
        "SMMA (RMA)" => ta.rma(source, lengthbb)
        "WMA" => ta.wma(source, lengthbb)
        "VWMA" => ta.vwma(source, lengthbb)

basis = ma(src, lengthbb, maType)
dev = mult * ta.stdev(src, lengthbb)
upper = basis + dev
lower = basis - dev
offset = input.int(0, "Offset", minval = -500, maxval = 500, display = display.data_window, group = "Bollinger Band")

p1 = plot(upper, "Bollinger band Upper", color=color.rgb(255, 0, 64, 54), offset = offset)
p2 = plot(lower, "Bollinger band Lower", color=color.rgb(0, 81, 255, 54), offset = offset)
// fill(p1, p2, title = "Background", color=color.rgb(33, 150, 243, 95))

////////////////////////////////////////////////////////////////////////////////////////////////////////



// plotcandle(o_, h_, l_, c_, title='CDV Candles', color = o_ <= c_ ? colorup : colordown, bordercolor = o_ <= c_ ? bcolup : bcoldown, wickcolor = o_ <= c_ ? bcolup : bcoldown)
// plotshape(shortCondition and (volUltraHigh or volVeryHigh or volHigh)  and o_ <= c_ , title="highvol",style=shape.cross, color=color.rgb(0, 238, 255), location= location.belowbar, size=size.tiny)
// plotshape(longCondition and (volUltraHigh or volVeryHigh or volHigh) and  o_ >= c_  , title="highvol",style=shape.cross            , color=color.rgb(255, 0, 76), location= location.abovebar, size=size.tiny)
// ================================================= Orders line ===============================
//shortCondition and 
// if((volUltraHigh)  and o_ <= c_)
//     line.new(x1=bar_index, y1=open, x2=bar_index + 20, y2=open, color=color.rgb(33, 73, 184, 27), width = 1)
// //longCondition and 
// if((volUltraHigh  )  and   o_ >= c_ )
//     line.new(x1=bar_index, y1=open, x2=bar_index + 20, y2=open, color=color.rgb(255, 0, 21, 57),width = 1)



// if(( volVeryHigh)  and o_ <= c_)
//     line.new(x1=bar_index, y1=open, x2=bar_index + 10, y2=open, color=color.rgb(33, 73, 184, 27), width = 1)
// //longCondition and 
// if((volVeryHigh )  and   o_ >= c_ )
//     line.new(x1=bar_index, y1=open, x2=bar_index + 10, y2=open, color=color.rgb(255, 0, 21, 57),width = 1)




// if((volHigh)  and o_ <= c_)
//     line.new(x1=bar_index, y1=open, x2=bar_index + 5, y2=open, color=color.rgb(33, 73, 184, 27), width = 1)
// //longCondition and 
// if(( volHigh)  and   o_ >= c_ )
//     line.new(x1=bar_index, y1=open, x2=bar_index + 5, y2=open, color=color.rgb(255, 0, 21, 57),width = 1)

